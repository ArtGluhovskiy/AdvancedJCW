package org.art.entities;

import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

import javax.persistence.*;
import java.io.Serializable;
import java.sql.Date;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/**
 * This is an implementation of a java task for application. This class contains
 * all information needed for user, class loader, method invocation etc.
 */
@Data
@DynamicUpdate
@Entity
@Table(name = "JAVA_TASKS")
public class JavaTask implements Serializable {

    public JavaTask(int popularity) {
        this.popularity = popularity;
    }

    @Transient
    private static final long SerialVersionUID = 1L;

    @Id
    @GeneratedValue(generator = "ID_GENERATOR")
    @GenericGenerator(
            name = "ID_GENERATOR",
            strategy = "enhanced-sequence",
            parameters = {
                    @Parameter(
                            name = "sequence_name",
                            value = "TASK_SEQUENCE"
                    )
            }
    )
    @Column(name = "TASK_ID")
    private Long taskId;

    @Column(name = "POPULARITY")
    private int popularity;

    @OneToMany(mappedBy = "javaTask", fetch = FetchType.LAZY,
            cascade = {CascadeType.PERSIST})
    private Set<TaskOrder> orders = new HashSet<>();

    //    @Enumerated(value = EnumType.STRING)
    @Column(name = "DIF_GROUP")
    private String difficultyGroup = DifficultyGroup.BEGINNER.toString();

    @Column(name = "DESCR")
    private String shortDescr = "Finding the index of max element in the array";

    @CreationTimestamp
    @Column(name = "REG_DATE", updatable = false)
    private Date regDate;

    // Efficient time of the algorithm (in mcs)
    @Column(name = "ELAPSED_TIME")
    private long elapsedTime = 100;

    @Lob
    @Column(name = "BINARY_TASK")
    private byte[] binTask;

    // Task description and test info for user
    @Transient
    private String description = "Welcome to JavaCodeWars! This is your first java-quiz! Quite simple. Just for warming-up.<br>"
                                 + "You need to write an algorithm of finding the maximum element in the array of integers."
                                 + "Note, that your method must return the location (index) of the maximum element.";

    @Transient
    private String topics = "Java Core, Arrays, Loops";

    @Transient
    private String testInfo = "import org.junit.Test;<br>" +
                              "import static org.junit.Assert.*;<br>" +
                              "public class MaxFinderTest {<br>" +
                              "&#8195;&#8195;@Test<br>" +
                              "&#8195;&#8195;public void findMaxIndex() throws Exception {<br>" +
                              "&#8195;&#8195;&#8195;&#8195;MaxFinder maxFinder = new MaxFinder();<br>" +
                              "&#8195;&#8195;&#8195;&#8195;assertEquals(\"The index of max element in the array is 4\",<br>" +
                              "&#8195;&#8195;&#8195;&#8195;4, maxFinder.findMaxIndex(new int[] {1, 5, 7, -2, 11, 8, 1}));<br>" +
                              "&#8195;&#8195;}<br>" +
                              "}";

    // Value of the task
    @Transient
    private int value = 3;

    // Parameters for class loader and method invocation
    @Transient
    private int parametersNumber = 1;

    @Transient
    private Object result = 4;

    @Transient
    private String className = "MaxFinder";

    @Transient
    private String methodName = "findMaxIndex";

    @Transient
    private String methodString = "public int findMaxIndex(int[] array) {";

    @Transient
    private Object[] testMethodParameters = new Object[]{new int[] {1, 5, 7, -2, 11, 8, 1}};

    @Transient
    private Class[] methodParametersType = new Class[]{int[].class};

    public JavaTask() {}

    @Override
    public String toString() {
        return new StringBuilder("*** JavaTask info:\n")
                .append("* task id: " + taskId + ";\n")
                .append("* popularity: " + popularity + ";\n")
                .append("* task value: " + value + ";\n")
                .append("* task difficulty: " + difficultyGroup + ";\n")
                .append("* short task description:\n \"" + shortDescr + "\"\n")
                .append("* full description of the task:\n \"" + description + "\"\n")
                .append("* test information:\n" + testInfo + "\n")
                .append("* elapsed time: " + elapsedTime + ";\n")
                .append("* registration date of the task: \"" + regDate + "\";\n")
                .append("* class name: \"" + className + "\";\n")
                .append("* name of the target method: \"" + methodName + "\";\n")
                .append("* number of the method parameters: " + parametersNumber + ";\n")
                .append("* method parameters for testing: " + Arrays.toString(testMethodParameters) + ";\n")
                .append("* types of method parameters: " + Arrays.toString(methodParametersType) + ";\n")
                .append("* required method result: " + result + ".\n")
                .append("***")
                .toString();
    }
}
